Insert data with transactions in DynamoDB using Node.js

Let's talk about transactions for a second. In my team.json file, I've got some team information here, but what happens if one record is corrupted. First, I cleared out my table. So I'm going to go ahead and scan it, just to show you that it's empty, and let's go ahead and return here to our teams.json folder, and let's mess up this last record for the New York Mets. Instead of Team ID, I'm putting team info, and instead of sort key, I'm just calling this, abbreviation. Now I have no partition key, and I have no sort key, so my code is going to confuse them how to insert this. I'm going to go ahead, and run my insert script again, and you see I got an error. Let's scan the table, and see if there's any data in it. There is. I got a partial result set, with some of the data in my file, but not all of it. Now because the data is small, we can see we're just missing the New York Mets, but imagine if this was thousands of entries and items here, and I don't know which one inserted and which ones didn't. In this case, I might want a transaction to roll everything back, if there's something wrong in the file. Lets go ahead and wrap our insert transaction now, to do an insert, that does just that. Returning to Visual Studio Code, let's go ahead and, hit the plus icon and create a new file, called insert transaction.js, and I'm going to go to insert.js, and I'm going to copy everything from lines 26 all the way to the top, and we'll start that and that insert transaction, and we're going to make a new function, called put items here on line 28, function putItems, which takes an array of items, and the first thing we're going to do, is return that promise, like we did before, which takes resolve and rejects, with a fat arrow, and inside of here, what we're going to do, is we're going to create a new object, called var params, and this is going to be a little different than the regular insert. We're actually going to create an element here called TransactItems, which is an array, and then we're going to need to loop through each item, and put it into this TransactItems array. So I'll go ahead items.forEach, and I will say for each item, with a fat array, I'm going to put params.TrasactItems.push, and then I'm going to put curly braces inside that push. I'm going to wrap this with put, colon, and inside of here, I'll put the table name, with the table name, as well as item, with the item. So now that I've done that, let's go ahead and go down to DynamoDB Transaction, on line 45, and we're going to write, transactWriteItems, pass the params, and then an err and the data callback, and we're going to say, if there's an err, reject, else, we are going to resolve, and let's go ahead and run this now. So I'll go ahead and command save. Before we do that, let's go to teams.json, and I've actually put it back to the way where it looks good, so let's go ahead and break this, if it's not already broken. What we want to see here is, no records inserted into the database, because of this transaction. Let's save that. Let's go ahead and scan our table, and make sure our table is still empty. If your table is not empty, you'll want to clear it here. Now that I've done that, let's go ahead and run node insertTransaction, and you see I got an error. So let's go ahead and hit up, and let's scan the table again, and see if that inserted nothing, and it did no partial inserts. Now let's go back to teams.json, and let's repair this file. So I should have teamID on my 91, and I should have sort key on line 94. I'll save that, and let's go ahead and run this again, and I'll see if we get a successful insert, and I got no data back, so let's scan our table, and see what's in it, and there we go, I've got 23 records in my table, everything was successful.